using dnlib.DotNet;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Reflection;

namespace Obfu_Net
{
    class MethodNameChange
    {
        private static readonly List<string> commonWords = new List<string>
        {
            "method", "class", "object", "variable", "function", "parameter", "instance", "property", "value", "attribute","ab-",
"ABA",
"Ababa",
"Ababdeh",
"Ababua",
"abac",
"abaca",
"abacay",
"abacas",
"abacate",
"abacaxi",
"abaci",
"abacinate",
"abacination",
"abacisci",
"abaciscus",
"abacist",
"aback",
"abacli",
"Abaco",
"abacot",
"abacterial",
"abactinal",
"abactinally",
"abaction",
"abactor",
"abaculi",
"abaculus",
"abacus",
"abacuses",
"Abad",
"abada",
"Abadan",
"Abaddon",
"abadejo",
"abadengo",
"abadia",
"Abadite",
"abaff",
"abaft",
"Abagael",
"Abagail",
"Abagtha",
"abay",
"abayah",
"Abailard",
"abaisance",
"abaised",
"abaiser",
"abaisse",
"abaissed",
"abaka",
"Abakan",
"abakas",
"Abakumov",
"abalation",
"abalienate",
"abalienated",
"abalienating",
"abalienation",
"abalone",
"abalones",
"Abama",
"abamp",
"abampere",
"abamperes",
"abamps",
"Abana",
"aband",
"abandon",
"abandonable",
"abandoned",
"abandonedly",
"abandonee",
"abandoner",
"abandoners",
"abandoning",
"abandonment",
"abandonments",
"abandons",
"abandum",
"abanet",
"abanga",
"Abanic",
"abannition",
"Abantes",
"abapical",
"abaptiston",
"abaptistum",
"Abarambo",
"Abarbarea",
"Abaris",
"abarthrosis",
"abarticular",
"abarticulation",
"Abas",
"abase",
"abased",
"abasedly",
"abasedness",
"abasement",
"abasements",
"abaser",
"abasers",
"abases",
"Abasgi",
"abash",
"abashed",
"abashedly",
"abashedness",
"abashes",
"abashing",
"abashless",
"abashlessly",
"abashment",
"abashments",
"abasia",
"abasias",
"abasic",
"abasing",
"abasio",
"abask",
"abassi",
"Abassieh",
"Abassin",
"abastard",
"abastardize",
"abastral",
"abatable",
"abatage",
"Abate",
"abated",
"abatement",
"abatements",
"abater",
"abaters",
"abates",
"abatic",
"abating",
"abatis",
"abatised",
"abatises",
"abatjour",
"abatjours",
"abaton",
"abator",
"abators",
"ABATS",
"abattage",
"abattis",
"abattised",
"abattises",
"abattoir",
"abattoirs",
"abattu",
"abattue",
"Abatua",
"abature",
"abaue",
"abave",
"abaxial",
"abaxile",
"abaze",
"abb",
"Abba",
"abbacy",
"abbacies",
"abbacomes",
"Abbadide",
"Abbai",
"abbaye",
"abbandono",
"abbas",
"abbasi",
"Abbasid",
"abbassi",
"Abbassid",
"Abbasside",
"Abbate",
"abbatial",
"abbatical",
"abbatie",
"Abbe",
"Abbey",
"abbeys",
"abbey's",
"abbeystead",
"abbeystede",
"abbes",
"abbess",
"abbesses",
"abbest",
"Abbevilean",
"Abbeville",
"Abbevillian",
"Abbi",
"Abby",
"Abbie",
"Abbye",
"Abbyville",
"abboccato",
"abbogada",
"Abbot",
"abbotcy",
"abbotcies",
"abbotnullius",
"abbotric",
"abbots",
"abbot's",
"Abbotsen",
"Abbotsford",
"abbotship",
"abbotships",
"Abbotson",
"Abbotsun",
"Abbott",
"Abbottson",
"Abbottstown",
"Abboud",
"abbozzo",
"ABBR",
"abbrev",
"abbreviatable",
"abbreviate",
"abbreviated",
"abbreviately",
"abbreviates",
"abbreviating",
"abbreviation",
"abbreviations",
"abbreviator",
"abbreviatory",
"abbreviators",
"abbreviature",
"abbroachment",
"ABC",
"abcess",
"abcissa",
"abcoulomb",
"ABCs",
"abd",
"abdal",
"abdali",
"abdaria",
"abdat",
"Abdel",
"Abd-el-Kadir",
"Abd-el-Krim",
"Abdella",
"Abderhalden",
"Abderian",
"Abderite",
"Abderus",
"abdest",
"Abdias",
"abdicable",
"abdicant",
"abdicate",
"abdicated",
"abdicates",
"abdicating",
"abdication",
"abdications",
"abdicative",
"abdicator",
"Abdiel",
"abditive",
"abditory",
"abdom",
"abdomen",
"abdomens",
"abdomen's",
"abdomina",
"abdominal",
"Abdominales",
"abdominalia",
"abdominalian",
"abdominally",
"abdominals",
"abdominoanterior",
"abdominocardiac",
"abdominocentesis",
"abdominocystic",
"abdominogenital",
"abdominohysterectomy",
"abdominohysterotomy",
"abdominoposterior",
"abdominoscope",
"abdominoscopy",
"abdominothoracic",
"abdominous",
"abdomino-uterotomy",
"abdominovaginal",
"abdominovesical",
"Abdon",
"Abdu",
"abduce",
"abduced",
"abducens",
"abducent",
"abducentes",
"abduces",
"abducing",
"abduct",
"abducted",
"abducting",
"abduction",
"abductions",
"abduction's",
"abductor",
"abductores",
"abductors",
"abductor's",
"abducts",
"Abdul",
"Abdul-Aziz",
"Abdul-baha",
"Abdulla",
"Abe",
"a-be",
"abeam",
"abear",
"abearance",
"Abebi",
"abecedaire",
"abecedary",
"abecedaria",
"abecedarian",
"abecedarians",
"abecedaries",
"abecedarium",
"abecedarius",
"abed",
"abede",
"abedge",
"Abednego",
"abegge",
"Abey",
"abeyance",
"abeyances",
"abeyancy",
"abeyancies",
"abeyant",
"abeigh",
"ABEL",
"Abelard",
"abele",
"abeles",
"Abelia",
"Abelian",
"Abelicea",
"Abelite",
"Abell",
"Abelmoschus",
"abelmosk",
"abelmosks",
"abelmusk",
"Abelonian",
"Abelson",
"abeltree",
"Abencerrages",
"abend",
"abends",
"Abenezra",
"abenteric",
"Abeokuta",
"abepithymia",
"ABEPP",
"Abercromby",
"Abercrombie",
"Aberdare",
"aberdavine",
"Aberdeen",
"Aberdeenshire",
"aberdevine",
"Aberdonian",
"aberduvine",
"Aberfan",
"Aberglaube",
"Aberia",
"Aberystwyth",
"Abernant",
"Abernathy",
"abernethy",
"Abernon",
"aberr",
"aberrance",
"aberrancy",
"aberrancies",
"aberrant",
"aberrantly",
"aberrants",
"aberrate",
"aberrated",
"aberrating",
"aberration",
"aberrational",
"aberrations",
"aberrative",
"aberrator",
"aberrometer",
"aberroscope",
"Abert",
"aberuncate",
"aberuncator",
"abesse",
"abessive",
"abet",
"abetment",
"abetments",
"abets",
"abettal",
"abettals",
"abetted",
"abetter",
"abetters",
"abetting",
"abettor",
"abettors",
"Abeu",
"abevacuation",
"abfarad",
"abfarads",
"ABFM",
"Abgatha",
"ABHC",
"abhenry",
"abhenries",
"abhenrys",
"abhinaya",
"abhiseka",
"abhominable",
"abhor",
"abhorred",
"abhorrence",
"abhorrences",
"abhorrency",
"abhorrent",
"abhorrently",
"abhorrer",
"abhorrers",
"abhorrible",
"abhorring",
"abhors",
"Abhorson",
"ABI",
"aby",
"Abia",
"Abiathar",
"Abib",
"abichite",
"abidal",
"abidance",
"abidances",
"abidden",
"abide",
"abided",
"abider",
"abiders",
"abides",
"abidi",
"abiding",
"abidingly",
"abidingness",
"Abidjan",
"Abydos",
"Abie",
"abye",
"abied",
"abyed",
"abiegh",
"abience",
"abient",
"Abies",
"abyes",
        };
        private static Random random = new Random();

        public static void ChangeMethodNames(ModuleDefMD moduleDef, Assembly assembly)
        {
            Console.WriteLine("[+] Changing method names");

            IEnumerable<TypeDef> types = moduleDef.GetTypes();
            int iteration = 0;

            foreach (var type in types.ToList())
            {
                Dictionary<string, string> org_names = new Dictionary<string, string>();
                string typeRandom = GetEncodedMethodName();
                typeRandom = typeRandom + iteration;
                org_names[typeRandom] = type.Name;

                
                if (!type.Name.StartsWith("<"))
                    type.Name = typeRandom;
                else
                {
                    continue;
                }

                foreach (var method in type.Methods)
                {
                    if (method.Name == "Main")
                        continue;
                    if (method.Name == ".ctor")
                    {
                        continue;
                    }
                    if (method.Name.Length < 9)
                    {
                        continue;
                    }
                    //Console.WriteLine(method.Name);
                    string encodedStr = GetEncodedMethodName();
                    method.Name = encodedStr + iteration.ToString();
                }

                iteration++;
            }
        }

        private static string GetEncodedMethodName()
        {
            // Choose 3 words from the list and concatenate them
            List<string> selectedWords = new List<string>();

            for (int i = 0; i < 3; i++)
            {
                int index = random.Next(commonWords.Count);
                selectedWords.Add(commonWords[index]);
            }

            return string.Join("", selectedWords);
        }
    }
}
